services:
    influxdb:
        image: influxdb:2.0.7
        environment:
            DOCKER_INFLUXDB_INIT_MODE: setup
            DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USERNAME}
            DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD}
            DOCKER_INFLUXDB_INIT_ORG: iot
            DOCKER_INFLUXDB_INIT_BUCKET: users_business_events
            DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN}
        ports:
        - "8090:8090"
    postgresql:
        image: postgres:15.1
        hostname: postgresql
        container_name: postgresDB
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U postgres']
            interval: 10s
            timeout: 5s
            retries: 5
        volumes:
        - pg_data:/var/lib/postgresql/data
        environment:
            PGDATA: "/var/lib/postgresql/data"
            POSTGRES_DB: "postgres"
            POSTGRES_USER: "postgres"
            POSTGRES_PASSWORD: "postgres"
            POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
        ports:
        - "5439:5439"
    rabbitmq:
        image: rabbitmq:3-management-alpine
        container_name: 'rabbitmq'
        ports:
            - 5672:5672
            - 15672:15672
        volumes:
            - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
            - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
        networks:
            - rabbitmq_go_net
    cache:
        image: redis:6.2-alpine
        restart: always
        ports:
        - '6379:6379'
        command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
        volumes: 
        - cache:/data
    gorse_redis:
        image: redis
        restart: unless-stopped
        ports:
        - 6378:6378
        command: ["redis-server", "--port", "6378"]
    mongo:
        image: mongo:4.0
        ports:
        - 27017:27017
        environment:
            MONGO_INITDB_DATABASE: gorse
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: password
        volumes:
        - mongo_data:/data/db

    # clickhouse:
    #   image: yandex/clickhouse-server:21.10
    #   ports:
    #     - 8123:8123
    #   environment:
    #     CLICKHOUSE_DB: gorse
    #     CLICKHOUSE_USER: gorse
    #     CLICKHOUSE_PASSWORD: gorse_pass
    #   volumes:
    #     - clickhouse_data:/var/lib/clickhouse

    gorse_worker:
        image: zhenghaoz/gorse-worker
        restart: unless-stopped
        ports:
        - 8089:8089
        command: >
            --master-host gorse_master --master-port 8090 
            --http-host 0.0.0.0 --http-port 8089
            --log-path /var/log/gorse/worker.log 
            --cache-path /var/lib/gorse/worker_cache.data
        volumes:
        - gorse_log:/var/log/gorse
        - gorse_worker_data:/var/lib/gorse
        depends_on:
        - gorse_master
    gorse_server:
        image: zhenghaoz/gorse-server
        restart: unless-stopped
        ports:
        - 8087:8087
        command: >
            --master-host gorse_master --master-port 8090 
            --http-host 0.0.0.0 --http-port 8087
            --log-path /var/log/gorse/server.log 
            --cache-path /var/lib/gorse/server_cache.data
        volumes:
        - gorse_log:/var/log/gorse
        - gorse_server_data:/var/lib/gorse
        depends_on:
        - gorse_master
    gorse_master:
        image: zhenghaoz/gorse-master
        restart: unless-stopped
        ports:
        - 8093:8090
        - 8088:8088
        environment:
            GORSE_CACHE_STORE: redis://gorse_redis:6378/0
            #   GORSE_DATA_STORE: mysql://gorse:gorse_pass@tcp(mysql:3306)/gorse
            # GORSE_DATA_STORE: postgres://gorse:gorse_pass@postgres/gorse?sslmode=disable
            GORSE_DATA_STORE: mongodb://root:password@mongo:27017/gorse?authSource=admin&connect=direct
            # GORSE_DATA_STORE: clickhouse://gorse:gorse_pass@clickhouse:8123/gorse
        command: >
            -c /etc/gorse/config.toml 
            --log-path /var/log/gorse/master.log 
            --cache-path /var/lib/gorse/master_cache.data
        volumes:
        - ./config.toml:/etc/gorse/config.toml
        - gorse_log:/var/log/gorse
        - gorse_master_data:/var/lib/gorse
        depends_on:
        - gorse_redis
        # - mysql
        # - postgres
        - mongo
        # - clickhouse
    jaeger:
        image: jaegertracing/all-in-one:${JAEGER_VERSION:-latest}
        ports:
        - "16686:16686"
        - "4318:4318"
        environment:
        - LOG_LEVEL=debug
        networks:
        - tracing_net
networks:
  rabbitmq_go_net:
    driver: bridge
  tracing_net:
volumes:
  pg_data: {}
  gorse_worker_data:
  gorse_server_data:
  gorse_master_data:
  gorse_log:
  mongo_data:
  cache:
    driver: local
    
